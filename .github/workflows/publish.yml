name: Publish to PyPI

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  check-version-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Required to compare with previous commit
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Extract current version
      id: current_version
      run: |
        CURRENT_VERSION=$(python -c "import setup; print(setup.setup()['version'])" 2>/dev/null || python -c "import re; print(re.search(r'version\s*=\s*[\"\']([^\"\']+)[\"\']', open('setup.py').read()).group(1))")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
    
    - name: Check if version changed
      id: version_check
      run: |
        # Get version from previous commit
        git checkout HEAD~1 setup.py 2>/dev/null || echo "No previous commit found"
        PREVIOUS_VERSION=$(python -c "import re; print(re.search(r'version\s*=\s*[\"\']([^\"\']+)[\"\']', open('setup.py').read()).group(1))" 2>/dev/null || echo "0.0.0")
        echo "Previous version: $PREVIOUS_VERSION"
        
        # Restore current file
        git checkout HEAD setup.py
        
        # Compare versions
        if [ "$CURRENT_VERSION" = "$PREVIOUS_VERSION" ]; then
          echo "version_changed=false" >> $GITHUB_OUTPUT
          echo "❌ Version unchanged ($CURRENT_VERSION). Skipping publication."
        else
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "✅ Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION. Proceeding with publication."
        fi
    
    - name: Build package
      if: steps.version_check.outputs.version_changed == 'true'
      run: python -m build
    
    - name: Check package
      if: steps.version_check.outputs.version_changed == 'true'
      run: twine check dist/*
    
    - name: Publish to PyPI
      if: steps.version_check.outputs.version_changed == 'true'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
    
    - name: Skip publication
      if: steps.version_check.outputs.version_changed == 'false'
      run: |
        echo "🚫 Publication skipped: version unchanged"
        echo "To publish, update the version in setup.py and push again"
